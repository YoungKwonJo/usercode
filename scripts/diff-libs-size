#!/usr/bin/env python
# Diffs the library size between scram release and work areas.

from glob import glob
from os import getenv
from os.path import join, basename
from commands import getstatusoutput
from sys import argv
import re

class LibInfo(object):
  def __init__(self, lib = None):
    self.totalSize = 0
    self.sections = {}
    if not lib:
      return
    for k, v in self.sectionData(lib):
      self.sections[k] = v
  
  def sectionData(self, libname):
    """ yields a set of tuples with section name and size
        for the passed libname.
    """
    error, output = getstatusoutput("size -A %s" % libname)
    if error:
      print "Error while running objdump:\n"
      print output
      exit(1)

    for l in output.split("\n"):
      match = re.match("([.][^ ]+)[ ]+([0-9a-f]+).*", l)
      if match:
        section, value = match.groups()
        self.totalSize += int(value)
        yield (section, int(value))

  def __iadd__(self, info):
    """ Sums the information for libname to
        this object.
    """
    self.totalSize += info.totalSize
    for k, v in info.sections.iteritems():
      if k not in self.sections:
        self.sections[k] = 0
      self.sections[k] += v
    return self

  def __isub__(self, info):
    """ Subtracts the information for libname from 
        this libinfo.
    """
    self.totalSize -= info.totalSize
    for k, v in info.sections.iteritems():
      if k not in self.sections:
        self.sections[k] = 0
      self.sections[k] -= v
    return self

  def __repr__(self):
    res = "  Total size: %s\n" % self.totalSize
    for k, v in self.sections.iteritems():
      res += "  %s: %s\n" % (k, v)
    return res

if __name__ == "__main__":
  if len (argv) == 1:
    path = "."
  elif len(argv) > 2:
    print "Too many options"
  else:
    path = argv[1]

  error, output = getstatusoutput("cd %s; eval `scram run -sh`; echo $CMSSW_RELEASE_BASE; echo $LOCALRT" % path)
  scramArch = getenv("SCRAM_ARCH")
  if error:
    print "Error while retrieving CMSSW release area:"
    print output
  release, work = output.split("\n")
  workLibs = glob(join(work, "lib", scramArch, "*.so"))
  origLibDir = join(release, "lib", scramArch)

  origLibs = [ join(origLibDir, basename(l)) for l in workLibs ]
  infos = {}
  totalInfo = LibInfo()
  for l in workLibs:
    info = LibInfo(l)
    infos[basename(l)] = info 
    totalInfo += info 
  for l in origLibs:
    info = LibInfo(l)
    infos[basename(l)] -= info 
    totalInfo -= info

  total = 0
  for l, i in infos.iteritems():
    print "%s: %s" % (l, i)

  print "Global (negative means work area is better):\n"
  print totalInfo
